# Command line tool for Condom
# Author: Vivien 'v0n' Didelot.

# Add ../lib to the load path
#lib_dir = File.join(File.dirname(__FILE__), '..', 'lib')
#$LOAD_PATH.unshift lib_dir unless $LOAD_PATH.include? lib_dir

require 'condom'
require 'optparse'

doc = Condom::Base.new
ops = doc.get_options

ARGV.options do |o|
  o.banner = "Usage: #{File.basename $0} [options] [destination]\n"
  o.on_head("\nAvailable options:")
  o.on("-m", "--math",                      "Math packages")             { ops[:math] = true }
  o.on("-l", "--listings",                  "Listings package")          { ops[:listings] = true }
  o.on("-f", "--fancyhdr",                  "Fancyhdr package")          { ops[:fancyhdr] = true }
  o.on("-p", "--pdf",                       "PDF config")                { ops[:pdf] = true }
  o.on("-g", "--graphics",                  "Images packages")           { ops[:graphics] = true }
  o.on("-n", "--filename=FILENAME", String, "Define a file name")        { |v| ops[:filename] = v }
  o.on("-a", "--author=AUTHOR",     String, "Define the author")         { |v| ops[:author] = v }
  o.on("-t", "--title=TITLE",       String, "Define the title")          { |v| ops[:title] = v }
  o.on("-d", "--date=DATE",         String, "Define the date")           { |v| ops[:date] = v }
  o.on("-c", "--class=CLASS",       String, "Define the document class",
               "\"beamer\" for a presentation, \"letter\" for a letter") { |v| ops[:document_class] = v }
  o.on("-L", "--language=LANGUAGE", String, "Define the language")       { |v| ops[:language] = v }
  o.on("-P", "--package=PACKAGE",   String, "Add another package")       { |v| ops[:other_packages].push v }
  o.on("-v", "--version",                   "Print Condom version")      { puts "Condom lib: version #{Condom::VERSION}" ; exit }
end

begin
  ARGV.options.parse!

  raise "Bad syntax." if ARGV.length > 1
  if ARGV.length == 1
    ops[:outputdir] = (ARGV.first == ".") ? Dir.getwd : ARGV.first
  end

  # Ask for confirmation
  ops.each do |key, val|
    value = case val
            when true: "yes"
            when false: "no"
            when Array: val.join(", ")
            else val
            end
    printf "%-15s=> %s\n", key, value
  end
  print "\nContinue [Y/n/h]? "
  case STDIN.gets.strip
  when 'Y', 'y', ''
  when 'h'
    puts ARGV.options
    exit
  else
    puts "Cancel."
    exit
  end

  doc = case ops[:document_class]
        when 'beamer': Condom::Presentation.new
        when 'letter': Condom::Letter.new
        else Condom::Document.new
        end
  doc.set_options(ops)
  doc.create
  puts "Files created in #{doc.outputdir}."
rescue => e
  STDERR.puts "error: #{e}"
end

exit
